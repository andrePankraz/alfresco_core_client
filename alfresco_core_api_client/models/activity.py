# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Activity(BaseModel):
    """
    Activities describe any past activity in a site, for example creating an item of content, commenting on a node, liking an item of content. 
    """ # noqa: E501
    post_person_id: StrictStr = Field(description="The id of the person who performed the activity", alias="postPersonId")
    id: StrictInt = Field(description="The unique id of the activity")
    site_id: Optional[StrictStr] = Field(default=None, description="The unique id of the site on which the activity was performed", alias="siteId")
    posted_at: Optional[datetime] = Field(default=None, description="The date time at which the activity was performed", alias="postedAt")
    feed_person_id: StrictStr = Field(description="The feed on which this activity was posted", alias="feedPersonId")
    activity_summary: Optional[Dict[str, StrictStr]] = Field(default=None, description="An object summarizing the activity", alias="activitySummary")
    activity_type: StrictStr = Field(description="The type of the activity posted", alias="activityType")
    __properties: ClassVar[List[str]] = ["postPersonId", "id", "siteId", "postedAt", "feedPersonId", "activitySummary", "activityType"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "postPersonId": obj.get("postPersonId"),
            "id": obj.get("id"),
            "siteId": obj.get("siteId"),
            "postedAt": obj.get("postedAt"),
            "feedPersonId": obj.get("feedPersonId"),
            "activitySummary": obj.get("activitySummary"),
            "activityType": obj.get("activityType")
        })
        return _obj


