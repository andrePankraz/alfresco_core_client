# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from alfresco_core_api_client.models.action_constraint_data import ActionConstraintData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ActionConstraint(BaseModel):
    """
    Response object holding action parameter constraint name and map of its values-labels. 
    """ # noqa: E501
    constraint_name: Optional[StrictStr] = Field(default=None, description="Name of the constraint. ", alias="constraintName")
    constraint_values: Optional[List[ActionConstraintData]] = Field(default=None, description="A list of constraint possbile values along with additional data (label, isNode flag). Sample object could be: ```JSON \"constraintValues\": [            {               \"value\": \"EQUALS\",               \"label\": \"Equals\"            },            {               \"value\": \"CONTAINS\",               \"label\": \"Contains\"            },            {               \"value\": \"BEGINS\",               \"label\": \"Begins With\"            },            {               \"value\": \"ENDS\",               \"label\": \"Ends With\"            },            {               \"value\": \"GREATER_THAN\",               \"label\": \"Greater Than\"            },            {               \"value\": \"GREATER_THAN_EQUAL\",               \"label\": \"Greater Than Or Equal To\"            },            {               \"value\": \"LESS_THAN\",               \"label\": \"Less Than\"            },            {               \"value\": \"LESS_THAN_EQUAL\",               \"label\": \"Less Than Or Equal To\"            }         ] ``` or ```JSON \"constraintValues\": [                         {                             \"value\": \"fa41fd6e-5640-410f-9f3e-93f268186f69\",                             \"label\": \"Start Pooled Review and Approve Workflow\",                             \"isNode\": true                         }                     ] ``` ", alias="constraintValues")
    __properties: ClassVar[List[str]] = ["constraintName", "constraintValues"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ActionConstraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in constraint_values (list)
        _items = []
        if self.constraint_values:
            for _item in self.constraint_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constraintValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ActionConstraint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constraintName": obj.get("constraintName"),
            "constraintValues": [ActionConstraintData.from_dict(_item) for _item in obj.get("constraintValues")] if obj.get("constraintValues") is not None else None
        })
        return _obj


