# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from alfresco_core_api_client.models.company import Company
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PersonBodyUpdate(BaseModel):
    """
    PersonBodyUpdate
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    description: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    skype_id: Optional[StrictStr] = Field(default=None, alias="skypeId")
    google_id: Optional[StrictStr] = Field(default=None, alias="googleId")
    instant_message_id: Optional[StrictStr] = Field(default=None, alias="instantMessageId")
    job_title: Optional[StrictStr] = Field(default=None, alias="jobTitle")
    location: Optional[StrictStr] = None
    company: Optional[Company] = None
    mobile: Optional[StrictStr] = None
    telephone: Optional[StrictStr] = None
    user_status: Optional[StrictStr] = Field(default=None, alias="userStatus")
    enabled: Optional[StrictBool] = None
    email_notifications_enabled: Optional[StrictBool] = Field(default=None, alias="emailNotificationsEnabled")
    password: Optional[StrictStr] = None
    old_password: Optional[StrictStr] = Field(default=None, alias="oldPassword")
    aspect_names: Optional[List[StrictStr]] = Field(default=None, alias="aspectNames")
    properties: Optional[Union[str, Any]] = None
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "description", "email", "skypeId", "googleId", "instantMessageId", "jobTitle", "location", "company", "mobile", "telephone", "userStatus", "enabled", "emailNotificationsEnabled", "password", "oldPassword", "aspectNames", "properties"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PersonBodyUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PersonBodyUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "description": obj.get("description"),
            "email": obj.get("email"),
            "skypeId": obj.get("skypeId"),
            "googleId": obj.get("googleId"),
            "instantMessageId": obj.get("instantMessageId"),
            "jobTitle": obj.get("jobTitle"),
            "location": obj.get("location"),
            "company": Company.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "mobile": obj.get("mobile"),
            "telephone": obj.get("telephone"),
            "userStatus": obj.get("userStatus"),
            "enabled": obj.get("enabled"),
            "emailNotificationsEnabled": obj.get("emailNotificationsEnabled"),
            "password": obj.get("password"),
            "oldPassword": obj.get("oldPassword"),
            "aspectNames": obj.get("aspectNames"),
            "properties": obj.get("properties")
        })
        return _obj


